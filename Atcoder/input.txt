***
*##
***

***#
#***

*#*#*

**#*
**#*
#**#
***#

**#
**#
#**

**#*
*#*#

***
***


// { Driver Code Starts
// Counts Palindromic Subsequence in a given String
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
    public:
    int mod=(int)1e9+7;
    long long solve(string &s1,vector<vector<long long>> &dp,int i,int j)
    {
        if(i>j)return 0;
        
        if(dp[i][j]!=-1)return dp[i][j];
        
        if(s1[i]==s1[j])
        {
            return dp[i][j]=(1+(solve(s1,dp,i+1,j))%mod+(solve(s1,dp,i,j-1))%mod)%mod;
        }
        else return dp[i][j]=(solve(s1,dp,i+1,j)%mod+solve(s1,dp,i,j-1)%mod-solve(s1,dp,i+1,j-1)%mod+mod+mod)%mod;
    }
    /*You are required to complete below method */
    long long int  countPS(string s1)
    {
       //Your code here
       
    
    
    int n=s1.length();
    vector<vector<long long>> dp(1010,vector<long long>(1010,-1));
    return (solve(s1,dp,0,n-1))%mod;
       
       
    }
     
};

// { Driver Code Starts.
// Driver program
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string str;
        cin>>str;
        Solution ob;
        long long int ans = ob.countPS(str);
        cout<<ans<<endl;
    } 
}  // } Driver Code Ends